#!/usr/bin/env python
#JHK
import numpy as np
from netCDF4 import Dataset
import tensorflow as tf
from tensorflow.keras import Model, datasets, layers, models, backend
from tensorflow import keras
from contextlib import redirect_stdout
import os, sys
from tqdm import tqdm
import shap

os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
os.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"]= "gpu_number"

op_train = 'op_training'
op_test  = 'op_testing'
op_gpu   = 'option_gpu'

o_path = 'h_dir/output/exp_name/ENensemble/'

print(o_path)

# GPU setting
if op_gpu == 'on':
    gpus = tf.config.experimental.list_physical_devices('GPU')
    tf.config.experimental.set_memory_growth(gpus[0], True)

#------------------------------------------------------------------------
# load training set
#------------------------------------------------------------------------
# input
f = Dataset('h_dir/dataset/tr_inp','r')
tr_x = f.variables['prcp'][:,:,12:67,:]
f.close()

# extend (0-360 -> 0-400)
tr_x = np.append(tr_x, tr_x[:,:,:,:16], axis=3) 

tdim, cdim, ydim, xdim = tr_x.shape

# axes swap
tr_x = np.swapaxes(tr_x, 1, 3)

#------------------------------------------------------------------------
# load test set (for evaluation)
#------------------------------------------------------------------------
# input
f = Dataset('h_dir/dataset/test_inp','r')
test_x = f.variables['prcp'][:,:,12:67,:]
f.close()

# extend (0-360 -> 0-380)
test_x = np.append(test_x, test_x[:,:,:,:16], axis=3) 

test_tdim, cdim, ydim, xdim = test_x.shape

# axes swap
test_x = np.swapaxes(test_x, 1, 3)

#------------------------------------------------------------------------
# load trained model
#------------------------------------------------------------------------
model = models.load_model(o_path+'model_last.hdf5')

#------------------------------------------------------------------------
# compute Deep SHAP
#------------------------------------------------------------------------
background = tr_x[np.random.choice(tdim, 1000, replace=False)]
del tr_x

explainer = shap.GradientExplainer(model, background)

shap_values = np.zeros((test_tdim,160,55))
n_batch = int(test_tdim / 100) + 1
for i in range(n_batch):
    shap_values[100*i:100+100*i] = np.array(explainer.shap_values(test_x[100*i:100+100*i]))[0,:,:,:,0]

# swap axes [tdim,160,55] -> [tdim,55,160]
shap_values = np.swapaxes(shap_values, 1, 2)

# --------------------------------------------------------------------------
# save SHAP values
# --------------------------------------------------------------------------
shap_values = np.array(shap_values)
# print(shap_values)

shap_values.astype('float32').tofile(o_path+'o_name.gdat')

ctl = open(o_path+'o_name.ctl','w')
ctl.write('dset ^o_name.gdat\n')
ctl.write('undef -9.99e+08\n')
ctl.write('xdef 160  linear   0.  2.5\n')
ctl.write('ydef  55  linear -60.  2.5\n')
ctl.write('zdef   1  linear 1 1\n')
ctl.write('tdef '+str(test_tdim)+'  linear 01jan0001 1yr\n')
ctl.write('vars   1\n')
ctl.write('p    1   1  variable\n')
ctl.write('ENDVARS\n')
ctl.close()

os.system('cdo -f nc import_binary '+o_path+'o_name.ctl '+o_path+'o_name.nc')
os.system('rm -f '+o_path+'o_name.ctl '+o_path+'o_name.gdat')

