#!/usr/bin/env python
#JHK
import numpy as np
from netCDF4 import Dataset
import os, pathlib
from sklearn.linear_model import Ridge
import joblib

i_path = 'h_dir/dataset/'
i_name1 = 'tr_inp'
i_name2 = 'tr_lab'

o_path = 'h_dir/output/exp_name/input_var/'
o_name1 = 'coef'
o_name2 = 'ooo'
pathlib.Path(o_path).mkdir(parents=True,exist_ok=True)

op_train = 'op_training'
op_test  = 'op_testing'

if op_train == 'on':
    
    #===================================================================
    # open train set
    #===================================================================
    # input
    f = Dataset('h_dir/input/tr_inp', 'r')
    tr_x = f['input_var'][:,0,12:67]

    tdim, ydim, xdim = tr_x.shape
    tr_x = tr_x.reshape(tdim, ydim*xdim)

    # label
    f = Dataset('h_dir/input/tr_lab', 'r')
    tr_y = f['agmt'][:,0,0,0]

if op_test == 'on':

    #===================================================================
    # open test set
    #===================================================================
    # input
    f = Dataset('h_dir/input/test_inp', 'r')
    test_x = f['input_var'][:,0,12:67]

    test_tdim, ydim, xdim = test_x.shape
    test_x = test_x.reshape(test_tdim, ydim*xdim)

if op_train == 'on':

    #============================================================================
    # training
    #============================================================================
    model = Ridge(alpha=1.0, normalize=True)
    model.fit(tr_x, tr_y)

    #============================================================================
    # save coefficient
    #============================================================================
    joblib.dump(model, o_path+'model.joblib')

    weight = model.coef_
    weight = weight.reshape(ydim,xdim)
    weight = np.array(weight)

    weight.astype('float32').tofile(o_path+o_name1+'.gdat')

    ctl = open(o_path+o_name1+'.ctl','w')
    ctl.write('dset ^'+o_name1+'.gdat\n')
    ctl.write('undef -9.99e+08\n')
    ctl.write('xdef '+str(xdim)+'  linear   0. 2.5\n')
    ctl.write('ydef '+str(ydim)+'  linear -60. 2.5\n')
    ctl.write('zdef   1  linear 1 1\n')
    ctl.write('tdef   1  linear 01jan0001 1yr\n')
    ctl.write('vars   1\n')
    ctl.write('coef    1   1  regression coefficient\n')
    ctl.write('ENDVARS\n')
    ctl.close()

    os.system('cdo -f nc import_binary '+o_path+o_name1+'.ctl '+o_path+o_name1+'.nc')
    os.system('rm -f '+o_path+o_name1+'.ctl '+o_path+o_name1+'.gdat')

if op_test == 'on':

    model = joblib.load(o_path+'model.joblib')
    pred = model.predict(test_x)
    pred = np.array(pred)

    pred.astype('float32').tofile(o_path+o_name2+'.gdat')

    ctl = open(o_path+o_name2+'.ctl','w')
    ctl.write('dset ^'+o_name2+'.gdat\n')
    ctl.write('undef -9.99e+08\n')
    ctl.write('xdef   1  linear   0. 2.5\n')
    ctl.write('ydef   1  linear -60. 2.5\n')
    ctl.write('zdef   1  linear 1 1\n')
    ctl.write('tdef '+str(test_tdim)+'  linear 01jan1850 1dy\n')
    ctl.write('vars   1\n')
    ctl.write('agmt    1   1  AGMT estimates\n')
    ctl.write('ENDVARS\n')
    ctl.close()

    os.system('cdo -f nc import_binary '+o_path+o_name2+'.ctl '+o_path+o_name2+'.nc')
    os.system('rm -f '+o_path+o_name2+'.ctl '+o_path+o_name2+'.gdat')

